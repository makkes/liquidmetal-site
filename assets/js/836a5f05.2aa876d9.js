"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4975],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,k=c["".concat(p,".").concat(d)]||c[d]||s[d]||i;return r?a.createElement(k,o(o({ref:t},m),{},{components:r})):a.createElement(k,o({ref:t},m))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1126:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const i={title:"Provision the infrastructure"},o=void 0,l={unversionedId:"tutorial-equinix/terraform",id:"tutorial-equinix/terraform",title:"Provision the infrastructure",description:"We will use terraform to create some devices in Equinix.",source:"@site/docs/tutorial-equinix/terraform.md",sourceDirName:"tutorial-equinix",slug:"/tutorial-equinix/terraform",permalink:"/site/docs/tutorial-equinix/terraform",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-equinix/terraform.md",tags:[],version:"current",frontMatter:{title:"Provision the infrastructure"},sidebar:"docs",previous:{title:"Overview",permalink:"/site/docs/tutorial-equinix/intro"},next:{title:"Inspect the environment",permalink:"/site/docs/tutorial-equinix/inspect"}},p={},u=[{value:"Configure",id:"configure",level:2},{value:"Apply",id:"apply",level:2},{value:"Approve the subnet routes",id:"approve-the-subnet-routes",level:3},{value:"Test",id:"test",level:2}],m={toc:u};function s(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We will use terraform to create some devices in Equinix."),(0,n.kt)("h2",{id:"configure"},"Configure"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new local directory and change into it:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir lm-equinix\ncd lm-equinix\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Generate an API key for both Equinix and Tailscale.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new SSH key pair:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t ed25519\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Connect your local machine to Tailscale:"),(0,n.kt)("p",{parentName:"li"},"For Linux users:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo tailscale up --accept-routes\n")),(0,n.kt)("p",{parentName:"li"},"For other OS users:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo tailscale up\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Write the following to a ",(0,n.kt)("inlineCode",{parentName:"p"},"main.tf")," file:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'cat << EOF >main.tf\nmodule "create_devices" {\n  source = "weaveworks-liquidmetal/liquidmetal/equinix"\n  version = "0.0.1"\n\n  metal_auth_token = "my equinix auth token"\n  org_id = "my org id"\n  project_name = "my-lm-project"\n  public_key = "my ssh public key"\n}\n\nmodule "provision_hosts" {\n  source = "weaveworks-liquidmetal/liquidmetal/equinix//modules/provision"\n  version = "0.0.1"\n\n  ts_auth_key = "my tailscale auth key"\n  private_key_path = "/path/to/my/private/key"\n\n  vlan_id = module.create_devices.vlan_id\n  network_hub_address = module.create_devices.network_hub_ip\n  microvm_host_addresses = module.create_devices.microvm_host_ips\n  baremetal_host_addresses = module.create_devices.bare_metal_host_ips\n}\nEOF\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Edit these fields in your ",(0,n.kt)("inlineCode",{parentName:"p"},"main.tf"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"metal_auth_token"),": ",(0,n.kt)("em",{parentName:"li"},"your API token for Equinix Metal")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"org_id"),": ",(0,n.kt)("em",{parentName:"li"},"your Equinix org id")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"project_name"),": ",(0,n.kt)("em",{parentName:"li"},"the name of the project to create")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"public_key"),": ",(0,n.kt)("em",{parentName:"li"},"the contents of the ",(0,n.kt)("inlineCode",{parentName:"em"},".pub")," file you created earlier")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ts_auth_key"),": ",(0,n.kt)("em",{parentName:"li"},"your Tailscale auth key")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"private_key_path"),": ",(0,n.kt)("em",{parentName:"li"},"the path to the private key you generated earlier"))))),(0,n.kt)("h2",{id:"apply"},"Apply"),(0,n.kt)("p",null,"Once your variables are configured, apply the plan:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"terraform init\nterraform plan\nterraform apply\n")),(0,n.kt)("p",null,"This make take a few minutes."),(0,n.kt)("p",null,"Once the ",(0,n.kt)("inlineCode",{parentName:"p"},"apply")," is complete, take a note of the following outputs:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"network_hub_ip")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"microvm_host_ips"))),(0,n.kt)("h3",{id:"approve-the-subnet-routes"},"Approve the subnet routes"),(0,n.kt)("p",null,"Once your ",(0,n.kt)("inlineCode",{parentName:"p"},"network-hub")," host is provisioned, navigate to your ",(0,n.kt)("a",{parentName:"p",href:"https://login.tailscale.com/admin/machines"},"Tailscale dash"),", and\nlocate your ",(0,n.kt)("inlineCode",{parentName:"p"},"network-hub")," machine which should have come online in your network. Select\nthe machine."),(0,n.kt)("p",null,"On the machine page, click Review under the 'Subnets' section, and toggle your range to 'enabled'."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"This bit is easy to overlook or forget, so I am highlighting here for extra clarity!")),(0,n.kt)("h2",{id:"test"},"Test"),(0,n.kt)("p",null,"To verify the ",(0,n.kt)("inlineCode",{parentName:"p"},"flintlockd")," services are ready to accept requests, you can use either ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/fl"},(0,n.kt)("inlineCode",{parentName:"a"},"fl"))," or\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/warehouse-13/hammertime"},(0,n.kt)("inlineCode",{parentName:"a"},"hammertime"))," to perform simple queries against the ",(0,n.kt)("inlineCode",{parentName:"p"},"microvm_host_ips")," returned\nby the terraform:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"hammertime list -a <address>:9090\n\nfl microvm get --host <address>:9090\n")))}s.isMDXComponent=!0}}]);