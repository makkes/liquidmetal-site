"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"Networking"},o="Networking modes",c={unversionedId:"guides/networking",id:"guides/networking",title:"Networking",description:"Flintlock can create MicroVMs in two different network modes.",source:"@site/docs/guides/networking.md",sourceDirName:"guides",slug:"/guides/networking",permalink:"/site/docs/guides/networking",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/guides/networking.md",tags:[],version:"current",frontMatter:{title:"Networking"},sidebar:"docs",previous:{title:"Hardware",permalink:"/site/docs/guides/hardware"},next:{title:"Flintlock",permalink:"/site/docs/guides/flintlock"}},l={},p=[{value:"Macvtap mode",id:"macvtap-mode",level:3},{value:"Bridge mode",id:"bridge-mode",level:3}],s={toc:p};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"networking-modes"},"Networking modes"),(0,a.kt)("p",null,"Flintlock can create MicroVMs in two different network modes."),(0,a.kt)("h3",{id:"macvtap-mode"},"Macvtap mode"),(0,a.kt)("p",null,"On devices with the capability, MicroVMs can be created with their default interface\nmapped to ",(0,a.kt)("a",{parentName:"p",href:"https://linuxnatives.net/2012/virtualized-bridged-networking-with-macvtap"},(0,a.kt)("inlineCode",{parentName:"a"},"macvtap"))," interfaces in the host."),(0,a.kt)("p",null,"The devices are created in ",(0,a.kt)("inlineCode",{parentName:"p"},"bridge")," mode, enabling inter-microvm traffic directly\nbetween the taps without it passing through the host interface."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"macvtap")," is the default option."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Liquid Metal Microvms macvtap networking",src:n(2831).Z,width:"1489",height:"671"})),(0,a.kt)("p",null,"Configure ",(0,a.kt)("inlineCode",{parentName:"p"},"flintlockd")," to be ready to create ",(0,a.kt)("inlineCode",{parentName:"p"},"macvtap")," devices by starting the service with\nthe following in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/opt/flintlockd/config.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"parent-iface: enp0 # where the value is a wired interface on the host\n")),(0,a.kt)("p",null,"When creating MicroVMs directly via flintlock, ensure the spec contains the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "interfaces": [\n      {\n        "device_id": "eth1",\n        "type": 0 // 0 for macvtap\n      }\n    ]\n...\n')),(0,a.kt)("p",null,"When creating MicroVMs as part of a cluster via CAPMVM, ensure the spec contains the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MicrovmMachineTemplate\nspec:\n  template:\n    spec:\n      networkInterfaces:\n      - guestDeviceName: eth1\n        type: macvtap\n")),(0,a.kt)("h3",{id:"bridge-mode"},"Bridge mode"),(0,a.kt)("p",null,"Flintlock can optionally create MicroVMs in which the default interface within the guest\nis mapped to a ",(0,a.kt)("inlineCode",{parentName:"p"},"tap")," device attached to a ",(0,a.kt)("inlineCode",{parentName:"p"},"bridge")," on the host."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Liquid Metal Microvms bridge networking",src:n(7211).Z,width:"1383",height:"722"})),(0,a.kt)("p",null,"Configure ",(0,a.kt)("inlineCode",{parentName:"p"},"flintlockd")," to be ready to use a bridge to create ",(0,a.kt)("inlineCode",{parentName:"p"},"tap")," devices by starting the service with\nthe following in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/opt/flintlockd/config.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"bridge-name: br0 # where the value is a bridge to a host interface\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"bridge-name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parent-iface")," can be set in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/opt/flintlockd/config.yaml"),".\nThe decision is made at MicroVM create time depending on which is requested via the API.")),(0,a.kt)("p",null,"When creating MicroVMs directly via flintlock, ensure the spec contains the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "interfaces": [\n      {\n        "device_id": "eth1",\n        "type": 1 // 1 for tap\n      }\n    ]\n...\n')),(0,a.kt)("p",null,"When creating MicroVMs as part of a cluster via CAPMVM, ensure the spec contains the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MicrovmMachineTemplate\nspec:\n  template:\n    spec:\n      networkInterfaces:\n      - guestDeviceName: eth1\n        type: tap\n")))}d.isMDXComponent=!0},7211:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/bridge-18b43b074da8425a3b5f8bea8bfe6dd3.jpg"},2831:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/macvtap-2830c88dbf40badd468a44a3357707d6.jpg"}}]);