"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[841],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,k=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return r?n.createElement(k,o(o({ref:t},u),{},{components:r})):n.createElement(k,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1352:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_position:5},o="Create a Liquid Metal cluster",i={unversionedId:"tutorial-basics/create",id:"tutorial-basics/create",title:"Create a Liquid Metal cluster",description:"We will use clusterctl again to generate a manifest for our workload cluster.",source:"@site/docs/tutorial-basics/create.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create",permalink:"/site/docs/tutorial-basics/create",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-basics/create.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Provision a CAPI management cluster",permalink:"/site/docs/tutorial-basics/capi"},next:{title:"Inspect the environment",permalink:"/site/docs/tutorial-basics/inspect"}},s={},c=[{value:"Configure",id:"configure",level:2},{value:"Generate",id:"generate",level:2},{value:"Apply",id:"apply",level:2},{value:"Use",id:"use",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-liquid-metal-cluster"},"Create a Liquid Metal cluster"),(0,a.kt)("p",null,"We will use ",(0,a.kt)("inlineCode",{parentName:"p"},"clusterctl")," again to generate a manifest for our workload cluster."),(0,a.kt)("h2",{id:"configure"},"Configure"),(0,a.kt)("p",null,"First, we need to configure some options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export CLUSTER_NAME=lm-demo\nexport CONTROL_PLANE_MACHINE_COUNT=1\nexport WORKER_MACHINE_COUNT=5\n")),(0,a.kt)("p",null,"This will result in a cluster with a single control plane, and 5 worker nodes.\nYou may change these values to whatever you wish."),(0,a.kt)("p",null,"CAPMVM will use ",(0,a.kt)("a",{parentName:"p",href:"https://kube-vip.io/"},(0,a.kt)("inlineCode",{parentName:"a"},"kube-vip"))," to assign a virtual IP to our Liquid Metal\ncluster. As we are doing this locally, we can use an internal address. This will\ndiffer for each user based on your local network settings. In my case, I will\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"192.168.1.25")," since that is available in the range managed by the DHCP server\nin my router."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export CONTROL_PLANE_VIP="192.168.1.25" # update to suit your network\n')),(0,a.kt)("p",null,"Lastly we set the address that the ",(0,a.kt)("inlineCode",{parentName:"p"},"flintlockd")," service we started earlier is\nlistening on. In my case this is ",(0,a.kt)("inlineCode",{parentName:"p"},"192.168.1.130"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export HOST_ENDPOINT="192.168.1.130:9090" # don\'t forget to include the port!\n')),(0,a.kt)("h2",{id:"generate"},"Generate"),(0,a.kt)("p",null,"Now we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"clusterctl")," to generate a cluster manifest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"clusterctl generate cluster -i microvm:$CAPMVM_VERSION -f cilium $CLUSTER_NAME > cluster.yaml\n")),(0,a.kt)("p",null,"You can open the file up to inspect it and verify that the settings are correct."),(0,a.kt)("h2",{id:"apply"},"Apply"),(0,a.kt)("p",null,"Once you are happy with the manifest, use ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tools/"},(0,a.kt)("inlineCode",{parentName:"a"},"kubectl"))," to apply it to your management\ncluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f cluster.yaml\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cluster.cluster.x-k8s.io/lm-demo created\nmicrovmcluster.infrastructure.cluster.x-k8s.io/lm-demo created\nkubeadmcontrolplane.controlplane.cluster.x-k8s.io/lm-demo-control-plane created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-control-plane created\nmachinedeployment.cluster.x-k8s.io/lm-demo-md-0 created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-md-0 created\nkubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/lm-demo-md-0 created\nclusterresourceset.addons.cluster.x-k8s.io/crs-cilium created\nconfigmap/cilium-addon created\n")),(0,a.kt)("h2",{id:"use"},"Use"),(0,a.kt)("p",null,"After a moment, you can fetch the MicroVMs workload cluster's ",(0,a.kt)("inlineCode",{parentName:"p"},"kubeconfig")," from\nyour management cluster. This ",(0,a.kt)("inlineCode",{parentName:"p"},"kubeconfig")," is written to a secret by CAPI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret $CLUSTER_NAME-kubeconfig -o json | jq -r .data.value | base64 -d > config.yaml\n")),(0,a.kt)("p",null,"With that ",(0,a.kt)("inlineCode",{parentName:"p"},"kubeconfig")," we can target the Liquid Metal cluster with ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --kubeconfig config.yaml get nodes\n")),(0,a.kt)("p",null,"This may not return anything for a few moments; we need to wait for the MicroVMs\nto start and join the cluster."),(0,a.kt)("p",null,"Continue to the next page to learn how to delete your workload cluster and teardown\nyour environment."))}p.isMDXComponent=!0}}]);