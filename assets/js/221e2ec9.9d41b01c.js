"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8104],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Flintlock"},i=void 0,l={unversionedId:"guides/flintlock",id:"guides/flintlock",title:"Flintlock",description:"API docs and instructions on how to provision hardware to run Flintlock services.",source:"@site/docs/guides/flintlock.md",sourceDirName:"guides",slug:"/guides/flintlock",permalink:"/site/docs/guides/flintlock",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/guides/flintlock.md",tags:[],version:"current",frontMatter:{title:"Flintlock"},sidebar:"docs",previous:{title:"Networking",permalink:"/site/docs/guides/networking"},next:{title:"MicroVM kernel and OS",permalink:"/site/docs/guides/images"}},s={},c=[{value:"API docs",id:"api-docs",level:2},{value:"Server configuration",id:"server-configuration",level:2},{value:"Adding SSH keys to MicroVMs",id:"adding-ssh-keys-to-microvms",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"API docs and instructions on how to provision hardware to run Flintlock services."),(0,o.kt)("h2",{id:"api-docs"},"API docs"),(0,o.kt)("p",null,"Flintlock is a gRPC service with an HTTP gateway."),(0,o.kt)("p",null,"The proto API can be found ",(0,o.kt)("a",{parentName:"p",href:"https://buf.build/weaveworks-liquidmetal/flintlock"},"here"),"."),(0,o.kt)("p",null,"The HTTP API can be found ",(0,o.kt)("a",{parentName:"p",href:"https://weaveworks-liquidmetal.github.io/flintlock/flintlock-api/"},"here"),"."),(0,o.kt)("h2",{id:"server-configuration"},"Server configuration"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"flintlockd")," can be run as a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/flintlock/blob/main/flintlockd.service"},(0,o.kt)("inlineCode",{parentName:"a"},"systemd")," service")," or directly/managed by another mechanism."),(0,o.kt)("p",null,"The service can be configured via flags or a yaml config file."),(0,o.kt)("p",null,"The minimum options required to run are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"containerd-socket: <path to containerd socket>\nverbosity: <1-9>\nparent-iface: <wired interface>\n")),(0,o.kt)("p",null,"Flintlock can be configured and started by the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/flintlock/tree/main/hack/scripts#provisionsh"},(0,o.kt)("inlineCode",{parentName:"a"},"provision.sh"))," tool."),(0,o.kt)("h2",{id:"adding-ssh-keys-to-microvms"},"Adding SSH keys to MicroVMs"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For instructions on how to add SSH keys to MicroVMs created via CAPMVM see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/capmvm/#adding-ssh-keys-to-microvms"},"this page"),".")),(0,o.kt)("p",null,"If you are creating MicroVMs via the flintlock API directly, encode your keys\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"cloud-init")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"user-data"'),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat << EOF >userdata.txt\n#cloud-config\nhostname: mvm0\nusers:\n    - name: root\n      ssh_authorized_keys:\n        - |\n          ssh-ed25519 foobar\ndisable_root: false\npackage_update: false\nfinal_message: The Liquid Metal booted system is good to go after $UPTIME seconds\nruncmd:\n    - dhclient -r\n    - dhclient\nEOF\n\ncat userdata.txt | base64\n# result\n")),(0,o.kt)("p",null,"And add the result to the spec:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "mvm0",\n    "namespace": "ns0",\n    // ...\n    "metadata": {\n      "meta-data": "aW5zdGFuY2VfaWQ6IG5zMC9tdm0wCmxvY2FsX2hvc3RuYW1lOiBtdm0wCnBsYXRmb3JtOiBsaXF1aWRfbWV0YWwK",\n      "user-data": "ENCODED RESULT"\n    }\n}\n')))}u.isMDXComponent=!0}}]);