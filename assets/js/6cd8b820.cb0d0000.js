"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3979],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={},l="Create a Liquid Metal cluster",i={unversionedId:"tutorial-equinix/create",id:"tutorial-equinix/create",title:"Create a Liquid Metal cluster",description:"We will use clusterctl again to generate a manifest for our workload cluster.",source:"@site/docs/tutorial-equinix/create.md",sourceDirName:"tutorial-equinix",slug:"/tutorial-equinix/create",permalink:"/site/docs/tutorial-equinix/create",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-equinix/create.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Provision a CAPI management cluster",permalink:"/site/docs/tutorial-equinix/capi"},next:{title:"Congratulations!",permalink:"/site/docs/tutorial-equinix/congratulations"}},s={},u=[{value:"Configure",id:"configure",level:2},{value:"Generate",id:"generate",level:2},{value:"Apply",id:"apply",level:2},{value:"Use",id:"use",level:2}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-liquid-metal-cluster"},"Create a Liquid Metal cluster"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"clusterctl")," again to generate a manifest for our workload cluster."),(0,r.kt)("h2",{id:"configure"},"Configure"),(0,r.kt)("p",null,"First, we need to configure some options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export CLUSTER_NAME=lm-demo\nexport CONTROL_PLANE_MACHINE_COUNT=1\nexport WORKER_MACHINE_COUNT=10\n")),(0,r.kt)("p",null,"This will result in a cluster with a single control plane, and 10 worker nodes.\nYou may change these values to whatever you wish."),(0,r.kt)("p",null,"CAPMVM will use ",(0,r.kt)("a",{parentName:"p",href:"https://kube-vip.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"kube-vip"))," to assign a virtual IP to our Liquid Metal\ncluster.\nThis IP will from ",(0,r.kt)("strong",{parentName:"p"},"outside")," the range set as the ",(0,r.kt)("inlineCode",{parentName:"p"},"dhcp")," pool in the ",(0,r.kt)("inlineCode",{parentName:"p"},"network-hub"),"\ndevice. For us this is ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.10.25"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export CONTROL_PLANE_VIP="192.168.10.25"\n')),(0,r.kt)("h2",{id:"generate"},"Generate"),(0,r.kt)("p",null,"Now we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"clusterctl")," to generate a cluster manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clusterctl generate cluster -i microvm:$CAPMVM_VERSION -f cilium $CLUSTER_NAME > cluster.yaml\n")),(0,r.kt)("p",null,"We need to edit the file to add the addresses to the ",(0,r.kt)("inlineCode",{parentName:"p"},"flintlockd")," servers. These\nwill have been printed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," under ",(0,r.kt)("inlineCode",{parentName:"p"},"microvm_host_ips")," after the terraform applied."),(0,r.kt)("p",null,"These are configured on the ",(0,r.kt)("inlineCode",{parentName:"p"},"MicrovmCluster")," spec at ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.placement.staticPool.hosts"),".\nAdd one entry under ",(0,r.kt)("inlineCode",{parentName:"p"},"hosts")," for each device created as a MicroVM host.\nWhile you are there, you can also add some ",(0,r.kt)("inlineCode",{parentName:"p"},"sshPublicKeys")," if you like."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see required file changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MicrovmCluster\nmetadata:\n  name: lm-demo\n  namespace: default\nspec:\n  sshPublicKeys:\n  - user: "root"\n    authorizedKeys:\n    - "ssh-ed25519 foobar"\n  placement:\n    staticPool:\n      hosts:\n      - controlplaneAllowed: true\n        endpoint: <ADDRESS_1>:9090\n      - controlplaneAllowed: true\n        endpoint: <ADDRESS_2>:9090\n...\n'))),(0,r.kt)("p",null,"Once you have made those changes, save and close the file."),(0,r.kt)("h2",{id:"apply"},"Apply"),(0,r.kt)("p",null,"Once you are happy with the manifest, use ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tools/"},(0,r.kt)("inlineCode",{parentName:"a"},"kubectl"))," to apply it to your management\ncluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f cluster.yaml\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cluster.cluster.x-k8s.io/lm-demo created\nmicrovmcluster.infrastructure.cluster.x-k8s.io/lm-demo created\nkubeadmcontrolplane.controlplane.cluster.x-k8s.io/lm-demo-control-plane created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-control-plane created\nmachinedeployment.cluster.x-k8s.io/lm-demo-md-0 created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-md-0 created\nkubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/lm-demo-md-0 created\nclusterresourceset.addons.cluster.x-k8s.io/crs-cilium created\nconfigmap/cilium-addon created\n"))),(0,r.kt)("h2",{id:"use"},"Use"),(0,r.kt)("p",null,"After a moment, you can fetch the MicroVMs workload cluster's ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," from\nyour management cluster. This ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," is written to a secret by CAPI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret $CLUSTER_NAME-kubeconfig -o json | jq -r .data.value | base64 -d > config.yaml\n")),(0,r.kt)("p",null,"With that ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," we can target the Liquid Metal cluster with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --kubeconfig config.yaml get nodes\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This may not return anything for a few moments; we need to wait for the MicroVMs\nto start and for the cluster control-plane to then be bootstrapped.\nPrepend the command with ",(0,r.kt)("inlineCode",{parentName:"p"},"watch")," and eventually (<=5m) you\nwill see the errors stop and the cluster come up."),(0,r.kt)("p",{parentName:"admonition"},"An expected error for the first 2-3 minutes is:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"Unable to connect to the server: dial tcp 192.168.10.25:6443: connect: no route to host\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                          STATUS   ROLES                  AGE     VERSION\nlm-demo-control-plane-hdpkj   Ready    control-plane,master   4m35s   v1.21.8\nlm-demo-md-0-9444f            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-bdqwj            Ready    <none>                 3m43s   v1.21.8\nlm-demo-md-0-gfgbq            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-pxkk6            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-qpzwn            Ready    <none>                 3m43s   v1.21.8\nlm-demo-md-0-sj8dh            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-o8yd8            Ready    <none>                 3m43s   v1.21.8\nlm-demo-md-0-sad0d            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-jhg78            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-9hf9l            Ready    <none>                 3m43s   v1.21.8\n"))))}m.isMDXComponent=!0}}]);